Elm.Puzzle = Elm.Puzzle || {};
Elm.Puzzle.make = function (_elm) {
   "use strict";
   _elm.Puzzle = _elm.Puzzle || {};
   if (_elm.Puzzle.values) return _elm.Puzzle.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var RPar = {ctor: "RPar"};
   var LPar = {ctor: "LPar"};
   var NumberToken = {ctor: "NumberToken"};
   var OperatorToken = {ctor: "OperatorToken"};
   var Del = {ctor: "Del"};
   var Clear = {ctor: "Clear"};
   var AddOperator = function (a) {    return {ctor: "AddOperator",_0: a};};
   var AddNumber = function (a) {    return {ctor: "AddNumber",_0: a};};
   var Token = F3(function (a,b,c) {    return {id: a,token_type: b,value: c};});
   var Puzzle = F6(function (a,b,c,d,e,f) {    return {id: a,n_large: b,numbers: c,target: d,solution: e,time: f};});
   var parCount = function (solution) {
      var parCountToken = F2(function (token,acc) {
         var _p0 = token.token_type;
         switch (_p0.ctor)
         {case "LPar": return acc + 1;
            case "RPar": return acc - 1;
            default: return acc;}
      });
      return A3($List.foldl,parCountToken,0,solution);
   };
   var isValid = F2(function (solution,token) {
      var last_added = $List.head(solution);
      var _p1 = last_added;
      if (_p1.ctor === "Nothing") {
            return _U.eq(token.token_type,NumberToken) || _U.eq(token.token_type,LPar);
         } else {
            var _p2 = _p1._0.token_type;
            switch (_p2.ctor)
            {case "NumberToken": return _U.eq(token.token_type,OperatorToken) || _U.eq(token.token_type,RPar) && _U.cmp(parCount(solution),0) > 0;
               case "OperatorToken": return _U.eq(token.token_type,NumberToken) || _U.eq(token.token_type,LPar);
               case "LPar": return _U.eq(token.token_type,NumberToken);
               default: return _U.eq(token.token_type,OperatorToken);}
         }
   });
   var isAvailable = F2(function (puzzle,token) {
      var notInSolution = function (solutionToken) {    return !_U.eq(solutionToken,token) || !_U.eq(token.token_type,NumberToken);};
      return A2($List.all,notInSolution,puzzle.solution);
   });
   var deleteToken = function (puzzle) {
      var _p3 = $List.tail(puzzle.solution);
      if (_p3.ctor === "Just") {
            return _U.update(puzzle,{solution: _p3._0});
         } else {
            return puzzle;
         }
   };
   var clearSolution = function (puzzle) {    return _U.update(puzzle,{solution: _U.list([])});};
   var addTokenToSolution = F2(function (puzzle,token) {
      return _U.eq(A2(isAvailable,puzzle,token),true) && A2(isValid,puzzle.solution,token) ? _U.update(puzzle,
      {solution: A2($List._op["::"],token,puzzle.solution)}) : puzzle;
   });
   var update = F2(function (action,puzzle) {
      var _p4 = action;
      switch (_p4.ctor)
      {case "AddNumber": return A2(addTokenToSolution,puzzle,_p4._0);
         case "AddOperator": return A2(addTokenToSolution,puzzle,_p4._0);
         case "Clear": return clearSolution(puzzle);
         default: return deleteToken(puzzle);}
   });
   var solutionValue = function (solution) {    return A2($List.map,function (_) {    return _.value;},solution);};
   var solutionField = function (puzzle) {    return $Html.text($String.concat($List.reverse(solutionValue(puzzle.solution))));};
   var operators = _U.list([{id: 1,value: "+",token_type: OperatorToken}
                           ,{id: 2,value: "−",token_type: OperatorToken}
                           ,{id: 3,value: "×",token_type: OperatorToken}
                           ,{id: 4,value: "÷",token_type: OperatorToken}
                           ,{id: 5,value: "(",token_type: LPar}
                           ,{id: 6,value: ")",token_type: RPar}]);
   var delKey = F2(function (address,puzzle) {
      return A2($Html.li,_U.list([$Html$Attributes.$class("operator"),A2($Html$Events.onClick,address,Del)]),_U.list([$Html.text("←")]));
   });
   var clearKey = F2(function (address,puzzle) {
      return A2($Html.li,_U.list([$Html$Attributes.$class("operator"),A2($Html$Events.onClick,address,Clear)]),_U.list([$Html.text("C")]));
   });
   var tokenItem = F3(function (address,puzzle,token) {
      var typeClass = _U.eq(token.token_type,NumberToken) ? "number " : "operator ";
      var validClass = A2(isValid,puzzle.solution,token) ? "valid " : "invalid ";
      var takenClass = A2(isAvailable,puzzle,token) ? "available " : "taken ";
      return A2($Html.li,
      _U.list([$Html$Attributes.$class(A2($Basics._op["++"],typeClass,A2($Basics._op["++"],takenClass,validClass)))
              ,A2($Html$Events.onClick,address,AddNumber(token))]),
      _U.list([$Html.text(token.value)]));
   });
   var puzzleDesc = function (puzzle) {
      return $Html.text($String.concat(_U.list([$Basics.toString(puzzle.n_large)," large and ",$Basics.toString(6 - puzzle.n_large)," small"])));
   };
   var puzzleTitle = function (puzzle) {    return $Html.text($String.concat(_U.list(["Puzzle ",$Basics.toString(puzzle.id)])));};
   var view = F2(function (address,puzzle) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h2,_U.list([]),_U.list([puzzleTitle(puzzle)]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("timer_wrap")]),
              _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("large_small")]),_U.list([puzzleDesc(puzzle)]))
                      ,A2($Html.div,_U.list([$Html$Attributes.$class("timer")]),_U.list([]))
                      ,A2($Html.div,_U.list([$Html$Attributes.$class("timer_count")]),_U.list([]))]))
              ,A2($Html.div,_U.list([$Html$Attributes.$class("solution")]),_U.list([solutionField(puzzle)]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.id("target"),$Html$Attributes.$class("number target")]),
              _U.list([$Html.text($Basics.toString(puzzle.target))]))
              ,A2($Html.ul,
              _U.list([$Html$Attributes.id("numbers"),$Html$Attributes.$class("numbers")]),
              A2($List.map,A2(tokenItem,address,puzzle),puzzle.numbers))
              ,A2($Html.ul,
              _U.list([$Html$Attributes.id("operators"),$Html$Attributes.$class("operators")]),
              A2($List.map,A2(tokenItem,address,puzzle),operators))
              ,A2($Html.ul,
              _U.list([$Html$Attributes.id("edit"),$Html$Attributes.$class("edit_keys")]),
              _U.list([A2(clearKey,address,puzzle),A2(delKey,address,puzzle)]))]));
   });
   var init = {id: 123456
              ,n_large: 2
              ,numbers: _U.list([{id: 1,value: "2",token_type: NumberToken}
                                ,{id: 2,value: "4",token_type: NumberToken}
                                ,{id: 3,value: "7",token_type: NumberToken}
                                ,{id: 4,value: "2",token_type: NumberToken}
                                ,{id: 5,value: "25",token_type: NumberToken}
                                ,{id: 6,value: "100",token_type: NumberToken}])
              ,target: 532
              ,solution: _U.list([])
              ,time: 0};
   var main = $StartApp$Simple.start({model: init,update: update,view: view});
   return _elm.Puzzle.values = {_op: _op
                               ,main: main
                               ,init: init
                               ,view: view
                               ,puzzleTitle: puzzleTitle
                               ,puzzleDesc: puzzleDesc
                               ,tokenItem: tokenItem
                               ,clearKey: clearKey
                               ,delKey: delKey
                               ,operators: operators
                               ,solutionField: solutionField
                               ,solutionValue: solutionValue
                               ,update: update
                               ,addTokenToSolution: addTokenToSolution
                               ,clearSolution: clearSolution
                               ,deleteToken: deleteToken
                               ,isAvailable: isAvailable
                               ,isValid: isValid
                               ,parCount: parCount
                               ,Puzzle: Puzzle
                               ,Token: Token
                               ,AddNumber: AddNumber
                               ,AddOperator: AddOperator
                               ,Clear: Clear
                               ,Del: Del
                               ,OperatorToken: OperatorToken
                               ,NumberToken: NumberToken
                               ,LPar: LPar
                               ,RPar: RPar};
};