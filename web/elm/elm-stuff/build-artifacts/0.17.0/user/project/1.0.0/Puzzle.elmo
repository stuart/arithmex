var _user$project$Puzzle$toToken = function (num) {
	return {
		id: num.id,
		value: _elm_lang$core$Basics$toString(num.number),
		token_type: _user$project$Solution$NumberToken
	};
};
var _user$project$Puzzle$updateTotal = F2(
	function (puzzle, newTotal) {
		var _p0 = newTotal;
		if (_p0.ctor === 'Nothing') {
			return puzzle;
		} else {
			return _elm_lang$core$Native_Utils.update(
				puzzle,
				{total: _p0._0});
		}
	});
var _user$project$Puzzle$deleteToken = function (puzzle) {
	return _elm_lang$core$Native_Utils.update(
		puzzle,
		{
			solution: _user$project$Solution$deleteToken(puzzle.solution)
		});
};
var _user$project$Puzzle$clearSolution = function (puzzle) {
	return _elm_lang$core$Native_Utils.update(
		puzzle,
		{solution: _user$project$Solution$clear});
};
var _user$project$Puzzle$addTokenToSolution = F2(
	function (puzzle, token) {
		return _elm_lang$core$Native_Utils.update(
			puzzle,
			{
				solution: A2(_user$project$Solution$addToken, puzzle.solution, token)
			});
	});
var _user$project$Puzzle$solutionField = function (puzzle) {
	return _elm_lang$html$Html$text(
		_user$project$Solution$solutionString(puzzle.solution));
};
var _user$project$Puzzle$operators = _elm_lang$core$Native_List.fromArray(
	[
		{id: 1, value: '+', token_type: _user$project$Solution$OperatorToken},
		{id: 2, value: '−', token_type: _user$project$Solution$OperatorToken},
		{id: 3, value: '×', token_type: _user$project$Solution$OperatorToken},
		{id: 4, value: '÷', token_type: _user$project$Solution$OperatorToken},
		{id: 5, value: '(', token_type: _user$project$Solution$LPar},
		{id: 6, value: ')', token_type: _user$project$Solution$RPar}
	]);
var _user$project$Puzzle$puzzleDesc = function (puzzle) {
	return _elm_lang$html$Html$text(
		_elm_lang$core$String$concat(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Basics$toString(puzzle.n_large),
					' large and ',
					_elm_lang$core$Basics$toString(6 - puzzle.n_large),
					' small'
				])));
};
var _user$project$Puzzle$puzzleTitle = function (puzzle) {
	return _elm_lang$html$Html$text(
		_elm_lang$core$String$concat(
			_elm_lang$core$Native_List.fromArray(
				[
					'Puzzle ',
					_elm_lang$core$Basics$toString(puzzle.id)
				])));
};
var _user$project$Puzzle$check = _elm_lang$core$Native_Platform.outgoingPort(
	'check',
	function (v) {
		return v;
	});
var _user$project$Puzzle$total = _elm_lang$core$Native_Platform.incomingPort(
	'total',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$int)
			])));
var _user$project$Puzzle$Puzzle = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, n_large: b, numbers: c, target: d, solution: e, time: f, total: g};
	});
var _user$project$Puzzle$Number = F2(
	function (a, b) {
		return {id: a, number: b};
	});
var _user$project$Puzzle$numberDecoder = A3(
	_elm_lang$core$Json_Decode$object2,
	_user$project$Puzzle$Number,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'number', _elm_lang$core$Json_Decode$int));
var _user$project$Puzzle$puzzleDecoder = A8(
	_elm_lang$core$Json_Decode$object7,
	_user$project$Puzzle$Puzzle,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'n_large', _elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'numbers',
		_elm_lang$core$Json_Decode$list(_user$project$Puzzle$numberDecoder)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'target', _elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'solution',
		_elm_lang$core$Json_Decode$succeed(
			_elm_lang$core$Native_List.fromArray(
				[]))),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'time', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'total', _elm_lang$core$Json_Decode$int));
var _user$project$Puzzle$Total = function (a) {
	return {total: a};
};
var _user$project$Puzzle$FetchSucceed = function (a) {
	return {ctor: 'FetchSucceed', _0: a};
};
var _user$project$Puzzle$getSucceed = function (result) {
	return _user$project$Puzzle$FetchSucceed(
		A2(_elm_lang$core$Debug$log, 'succeed', result));
};
var _user$project$Puzzle$FetchFail = {ctor: 'FetchFail'};
var _user$project$Puzzle$getFail = function (result) {
	var l = A2(_elm_lang$core$Debug$log, 'failed', result);
	return _user$project$Puzzle$FetchFail;
};
var _user$project$Puzzle$get = A3(
	_elm_lang$core$Task$perform,
	_user$project$Puzzle$getFail,
	_user$project$Puzzle$getSucceed,
	A2(_evancz$elm_http$Http$get, _user$project$Puzzle$puzzleDecoder, '/api/puzzle'));
var _user$project$Puzzle$init = function () {
	var puzzle = {
		id: 0,
		n_large: 0,
		numbers: _elm_lang$core$Native_List.fromArray(
			[]),
		solution: _elm_lang$core$Native_List.fromArray(
			[]),
		target: 0,
		time: 0,
		total: 0
	};
	return {ctor: '_Tuple2', _0: puzzle, _1: _user$project$Puzzle$get};
}();
var _user$project$Puzzle$CalcTotal = function (a) {
	return {ctor: 'CalcTotal', _0: a};
};
var _user$project$Puzzle$subscriptions = function (puzzle) {
	return _user$project$Puzzle$total(_user$project$Puzzle$CalcTotal);
};
var _user$project$Puzzle$Check = {ctor: 'Check'};
var _user$project$Puzzle$update = F2(
	function (msg, puzzle) {
		update:
		while (true) {
			var _p1 = msg;
			switch (_p1.ctor) {
				case 'AddToken':
					var _v2 = _user$project$Puzzle$Check,
						_v3 = A2(_user$project$Puzzle$addTokenToSolution, puzzle, _p1._0);
					msg = _v2;
					puzzle = _v3;
					continue update;
				case 'Clear':
					return {
						ctor: '_Tuple2',
						_0: _user$project$Puzzle$clearSolution(puzzle),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'Del':
					return {
						ctor: '_Tuple2',
						_0: _user$project$Puzzle$deleteToken(puzzle),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'Check':
					return {
						ctor: '_Tuple2',
						_0: puzzle,
						_1: _user$project$Puzzle$check(
							_user$project$Solution$evaluableSolutionString(puzzle.solution))
					};
				case 'CalcTotal':
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Puzzle$updateTotal, puzzle, _p1._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'FetchFail':
					return {ctor: '_Tuple2', _0: puzzle, _1: _elm_lang$core$Platform_Cmd$none};
				default:
					return {
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$Debug$log, 'puzzle:', _p1._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
			}
		}
	});
var _user$project$Puzzle$Del = {ctor: 'Del'};
var _user$project$Puzzle$delKey = function (puzzle) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('token operator'),
				_elm_lang$html$Html_Events$onClick(_user$project$Puzzle$Del)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('←')
			]));
};
var _user$project$Puzzle$Clear = {ctor: 'Clear'};
var _user$project$Puzzle$clearKey = function (puzzle) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('token operator'),
				_elm_lang$html$Html_Events$onClick(_user$project$Puzzle$Clear)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('C')
			]));
};
var _user$project$Puzzle$AddToken = function (a) {
	return {ctor: 'AddToken', _0: a};
};
var _user$project$Puzzle$tokenItem = F2(
	function (puzzle, token) {
		var typeClass = _elm_lang$core$Native_Utils.eq(token.token_type, _user$project$Solution$NumberToken) ? 'number ' : 'operator ';
		var validClass = A2(_user$project$Solution$isValid, puzzle.solution, token) ? 'valid ' : 'invalid ';
		var takenClass = A2(_user$project$Solution$isAvailable, puzzle.solution, token) ? 'available ' : 'taken ';
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'token ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							typeClass,
							A2(_elm_lang$core$Basics_ops['++'], takenClass, validClass)))),
					_elm_lang$html$Html_Events$onClick(
					_user$project$Puzzle$AddToken(token))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(token.value)
				]));
	});
var _user$project$Puzzle$numberItem = F2(
	function (puzzle, num) {
		return A2(
			_user$project$Puzzle$tokenItem,
			puzzle,
			_user$project$Puzzle$toToken(num));
	});
var _user$project$Puzzle$view = function (puzzle) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h2,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Puzzle$puzzleTitle(puzzle)
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('timer_wrap')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('large_small')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Puzzle$puzzleDesc(puzzle)
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('timer')
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('timer_count')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('solution')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Puzzle$solutionField(puzzle),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('total')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(puzzle.total))
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('target'),
						_elm_lang$html$Html_Attributes$class('token target')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(puzzle.target))
					])),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('numbers'),
						_elm_lang$html$Html_Attributes$class('numbers')
					]),
				A2(
					_elm_lang$core$List$map,
					_user$project$Puzzle$numberItem(puzzle),
					puzzle.numbers)),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('operators'),
						_elm_lang$html$Html_Attributes$class('operators')
					]),
				A2(
					_elm_lang$core$List$map,
					_user$project$Puzzle$tokenItem(puzzle),
					_user$project$Puzzle$operators)),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('edit'),
						_elm_lang$html$Html_Attributes$class('edit_keys')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Puzzle$clearKey(puzzle),
						_user$project$Puzzle$delKey(puzzle)
					]))
			]));
};
var _user$project$Puzzle$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Puzzle$init, update: _user$project$Puzzle$update, view: _user$project$Puzzle$view, subscriptions: _user$project$Puzzle$subscriptions})
};
